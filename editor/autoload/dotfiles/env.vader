### dotfiles#env#Repo(...) ###
Before (set repo path):
  " Ensure it points to a real directory.
  let g:dotfiles#env#directory = dotfiles#Repo()

" Execute (resolve the dotfiles env repo):
"   let repo = dotfiles#env#Repo()
"   call assert#type(repo, 'string', 'Return is not a string')

"   let path = g:dotfiles#env#directory
"   call assert#(repo ==# path, 'Unexpected directory: ' . repo)

Execute (returns null when the repo doesn't exist):
  let g:dotfiles#env#directory = '/some/weird/path'
  let repo = dotfiles#env#Repo()
  call assert#(repo is# v:null, 'Expected null repo path.')

Execute (resolves the full directory path):
  let path = dotfiles#Repo()
  let g:dotfiles#env#directory = substitute(path, $HOME, '~', '')
  let repo = dotfiles#env#Repo()
  call assert#(repo, 'Expected an expanded repo path')
  call assert#(repo isnot# g:dotfiles#env#directory, 'Not expanded')

### dotfiles#env#Path(...) ###
Execute (dotfiles path returns a string):
  let result = dotfiles#env#Path('yolo')
  call assert#type(result, 'string', 'Path is not a string')

Execute (dotfiles path concatenation without leading slash):
  let repo = dotfiles#env#Repo()
  let path = 'artifacts/llama-theme.sh'
  let result = dotfiles#env#Path(path)
  let without_prefix = result[len(repo):]
  let is_correct_prefix = without_prefix is# '/' . path
  call assert#(is_correct_prefix, 'Path was not added')

Execute (concat with leading slash):
  let repo = dotfiles#env#Repo()
  let path = '/linked/viml'
  let result = dotfiles#env#Path(path)
  let without_prefix = result[len(repo):]
  let is_correct_prefix = without_prefix is# path
  call assert#(is_correct_prefix, 'Extra slash was not removed')
