#!/usr/bin/env bash
# shellcheck disable=SC1091
set -e

ARTIFACTS_DIR="$(dotfiles dir)/artifacts"

if [[ ! -e "$ARTIFACTS_DIR" ]]; then
  mkdir "$ARTIFACTS_DIR"
fi

function announce {
  if [[ -z "$VERBOSE" ]]; then
    return
  fi

  local msg="$*"
  local border=""

  for _ in $(seq ${#msg}); do
    border="$border#"
  done

  echo
  echo "$border"
  echo "$@"
  echo "$border"
  echo
}

# Whether a command exists.
function installed {
  which "$1" &> /dev/null

  return $?
}

function platform_name {
  if [[ "$(uname -s)" == "Darwin" ]]; then
    echo mac
    return
  fi

  if installed apt-get; then
    echo ubuntu
    return
  fi
}

function platform_version {
  local platform="$(platform_name)"

  if [[ "$platform" == mac ]]; then
    uname -r
  else
    source /etc/os-release
    echo "$VERSION_ID"
  fi
}

# Exit 0 if $1 is the smaller of two version numbers.
function version_lt {
  local smallest_version="$(sort -V <(echo -e "$1\n$2") | head -1)"

  [[ "$smallest_version" == "$1" ]]
}

INSTALL_CMD=""

if installed brew; then
  INSTALL_CMD="brew install"
elif installed apt-get; then
  INSTALL_CMD="sudo apt-get install -y"
else
  echo "Unsupported platform. Sorry, loser."
fi

# Best-effort install.
function install {
  $INSTALL_CMD $1 1> /dev/null
}

# Install the thing if it doesn't exist.
function ensure {
  if installed "$1"; then
    return
  fi

  announce Installing "$1"
  install "$1"
}

function ensure_python3 {
  if installed python3; then
    return
  fi

  local pkg="python3"
  install "$pkg" || {
    if ! installed brew; then
      return $?
    fi

    # On Travis CI mac seems to come pre-installed with an
    # old version of python. Force python3.
    brew upgrade "$pkg"
    brew link --overwrite "$pkg"
  }
}

function ensure_apt_add_command {
  if installed add-apt-repository; then
    return
  fi

  install software-properties-common
  install python-software-properties
}

function get_pkg_list {
  local -a pkgs=()

  function add_pkg_if_missing {
    if ! installed "$1"; then
      pkgs=("${pkgs[@]}" "${2-$1}")
    fi
  }

  add_pkg_if_missing rustup
  add_pkg_if_missing zsh
  add_pkg_if_missing nvim neovim
  add_pkg_if_missing ruby
  add_pkg_if_missing travis
  add_pkg_if_missing tmux
  add_pkg_if_missing tmuxinator
  add_pkg_if_missing vint vim-vint
  add_pkg_if_missing yarn

  if ! nix-env -q antigen &> /dev/null; then
    pkgs=("${pkgs[@]}" antigen)
  fi

  echo "${pkgs[@]}"
}

function install_nix {
  if installed nix; then
    return
  fi

  announce Installing nix
  curl https://nixos.org/nix/install | sh
}

function install_packages {
  local -a packages

  while IFS='' read -r pkg; do
    packages+=("$pkg")
  done < <(get_pkg_list)

  if (( "${#packages}" == 0 )); then
    return
  fi

  # Resolve Travis ruby dependency conflict.
  nix-env --set-flag priority 4 ruby
  nix-env --install $packages
}

function use_zsh {
  # Don't attempt to change shell on Travis CI.
  # The build will hang forever.
  if [[ "$SHELL" == "$(which zsh)" || -n "$CI" ]]; then
    return
  fi

  chsh -s "$(which zsh)"
}

function get_cargo_pkg_list {
  local -a pkgs=()

  function add_pkg_if_missing {
    if ! installed "$1"; then
      pkgs=("${pkgs[@]}" "${2-$1}")
    fi
  }

  add_pkg_if_missing rg ripgrep
  add_pkg_if_missing fd fd-find
  add_pkg_if_missing viu
  add_pkg_if_missing bat
  add_pkg_if_missing sk skim
  add_pkg_if_missing pastel

  echo "${pkgs[@]}"
}

function install_cargo_packages {
  local -a packages

  while IFS='' read -r pkg; do
    packages+=("$pkg")
  done < <(get_cargo_pkg_list)

  if (( "${#packages}" == 0 )); then
    return
  fi

  cargo install $packages
}

# A node version manager, alternative to nvm.
function install_fnm {
  if installed fnm; then
    return
  fi

  announce Installing fnm
  curl -sSL https://raw.githubusercontent.com/Schniz/fnm/fa652764747ebeddc30382baf4a49a3ced93e5f5/.ci/install.sh \
    | SKIP_SHELL=true bash &> /dev/null
}

function install_node {
  local node_version=8.11.1

  if installed node && [[ "$(node --version)" == "$node_version" ]]; then
    return
  fi

  announce Installing node
  ~/.fnm/fnm install "$node_version" > /dev/null
  ~/.fnm/fnm use "$node_version" > /dev/null
  ~/.fnm/fnm alias "$node_version" default > /dev/null

  # Make the node path available.
  export PATH=$HOME/.fnm:$PATH
  eval "$(fnm env --multi)"
}

function install_vim_plug {
  local target=~/.local/share/nvim/site/autoload/plug.vim

  if [[ -f "$target" ]]; then
    return
  fi

  announce Installing vim-plug
  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
}

# This is deceptive. The viml interpreter is
# part of my dotfiles framework.
function install_viml {
  sudo ln -sf "$(dotfiles dir)/linked/viml" /usr/local/bin/viml
}

function install_python_neovim_plugin {
  if python3 -c 'import neovim' &> /dev/null; then
    return
  fi

  announce Installing python neovim plugin
  sudo -H pip3 'install' neovim > /dev/null
}

function install_neovim_plugins {
  local hash_file="$ARTIFACTS_DIR/plugins-hash.txt"
  local plugins_location="$(dotfiles dir)/editor/autoload/editor/plugins.vim"
  local plugins_sha="$(openssl sha256 "$plugins_location" | awk '{print $2}')"
  local last_sha="$(cat "$hash_file" 2> /dev/null || echo "no prior hash")"

  # Only re-install plugins when the plugins.vim file changes.
  if [[ "$last_sha" == "$plugins_sha" ]]; then
    return
  fi

  echo "$plugins_sha" > "$hash_file"
  announce Installing neovim plugins

  # Source the vimrc in non-interactive mode.
  nvim\
    -u /dev/null\
    -c "silent so ~/.config/nvim/init.vim"\
    -c "PlugInstall"\
    -c "UpdateRemotePlugins"\
    -c "qa"

  # Don't ask on startup.
  mkdir -p ~/.vim/plugged/vim-notes/misc/notes/user/
}

function install_pylint {
  if installed pylint; then
    return
  fi

  announce Installing pylint
  if installed brew; then
    pip3 install pylint
  else
    install pylint
  fi
}

function install_rustfmt {
  local list="$(rustup component list)"
  local pkg="$(grep rustfmt-preview <<< "$list")"

  if installed rustfmt; then
    return
  fi

  rustup component add rustfmt-preview
}

function install_shellcheck {
  if ! installed shellcheck; then
    announce Installing shellcheck
    install shellcheck &> /dev/null
  fi
}

ensure curl
ensure openssl
ensure_python3

install_nix
install_packages
install_cargo_packages
install_fnm
install_node
install_vim_plug
install_python_neovim_plugin
install_neovim_plugins
install_viml
install_pylint
install_rustfmt
install_shellcheck
use_zsh
