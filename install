#!/usr/bin/env bash
# shellcheck disable=SC1091,SC1090
set -e

ARTIFACTS_DIR="$(dotfiles dir)/artifacts"

if [[ ! -e "$ARTIFACTS_DIR" ]]; then
  mkdir "$ARTIFACTS_DIR"
fi

# Whether a command exists.
function installed {
  command -v "$1" > /dev/null
}

INSTALL_CMD=""

if installed brew; then
  INSTALL_CMD="brew install"
elif installed apt-get; then
  INSTALL_CMD="sudo apt-get install -y"
else
  echo "Unsupported platform. Sorry, loser."
fi

# Best-effort install.
function install {
  $INSTALL_CMD "${1[@]}" 1> /dev/null
}

# Install the thing if it doesn't exist.
function ensure {
  if installed "$1"; then
    return
  fi

  install "$1"
}

function get_pkg_list {
  local -a pkgs=()

  function add_pkg_if_missing {
    if ! installed "$1"; then
      pkgs=("${pkgs[@]}" "${2-$1}")
    fi
  }

  add_pkg_if_missing rustup
  add_pkg_if_missing fish
  add_pkg_if_missing zsh
  add_pkg_if_missing nvim neovim
  add_pkg_if_missing ruby
  add_pkg_if_missing travis
  add_pkg_if_missing tmux
  add_pkg_if_missing tmuxinator
  add_pkg_if_missing vint vim-vint
  add_pkg_if_missing yarn
  add_pkg_if_missing unzip
  add_pkg_if_missing glow
  add_pkg_if_missing lua lua-5.3.5

  if ! nix-env -q antigen &> /dev/null; then
    pkgs=("${pkgs[@]}" antigen)
  fi

  echo "${pkgs[@]}"
}

function install_nix {
  if installed nix; then
    return
  fi

  curl https://nixos.org/nix/install | sh

  # Activate!
  source ~/.nix-profile/etc/profile.d/nix.sh
}

function install_packages {
  local -a packages

  while IFS='' read -r pkg; do
    packages+=("$pkg")
  done < <(get_pkg_list)

  if (( ${#packages} > 0 )); then
    nix-env --install "${packages[@]}"
  fi
}

function get_cargo_pkg_list {
  local -a pkgs

  function add_pkg_if_missing {
    if ! installed "$1"; then
      pkgs=("${pkgs[@]}" "${2-$1}")
    fi
  }

  add_pkg_if_missing rg ripgrep
  add_pkg_if_missing fd fd-find
  add_pkg_if_missing viu
  add_pkg_if_missing bat
  add_pkg_if_missing sk skim
  add_pkg_if_missing pastel
  add_pkg_if_missing delta git-delta
  add_pkg_if_missing hexyl
  add_pkg_if_missing zoxide

  echo "${pkgs[@]}"
}

function install_rust_toolchain {
  if [[ "$(rustup toolchain list)" == "no installed toolchains" ]]; then
    rustup toolchain install nightly
    export PATH="$HOME/.cargo/bin:$PATH"
  fi
}

function install_cargo_packages {
  local -a packages

  while IFS='' read -r pkg; do
    packages+=("$pkg")
  done < <(get_cargo_pkg_list)

  if (( ${#packages} > 0 )); then
    cargo install "${packages[@]}"
  fi
}

# A node version manager, alternative to nvm.
function install_fnm {
  if installed fnm; then
    return
  fi

  curl -sSL https://raw.githubusercontent.com/Schniz/fnm/fa652764747ebeddc30382baf4a49a3ced93e5f5/.ci/install.sh \
    | SKIP_SHELL=true bash &> /dev/null
}

function install_node {
  local node_version=10.15.3

  if installed node && [[ "$(node --version)" == "$node_version" ]]; then
    return
  fi

  ~/.fnm/fnm install "$node_version" > /dev/null
  ~/.fnm/fnm use "$node_version" > /dev/null
  ~/.fnm/fnm alias "$node_version" default > /dev/null

  # Make the node path available.
  export PATH=$HOME/.fnm:$PATH
  eval "$(fnm env --multi)"
}

function install_vim_plug {
  local target=~/.local/share/nvim/site/autoload/plug.vim

  if [[ -f "$target" ]]; then
    return
  fi

  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
}

function install_neovim_plugins {
  local hash_file="$ARTIFACTS_DIR/plugins-hash.txt"
  local plugins_location="$(dotfiles dir)/editor/autoload/editor/plugins.vim"
  local plugins_sha="$(openssl sha256 "$plugins_location" | awk '{print $2}')"
  local last_sha="$(cat "$hash_file" 2> /dev/null || echo "no prior hash")"

  # Only re-install plugins when the plugins.vim file changes.
  if [[ "$last_sha" == "$plugins_sha" ]]; then
    return
  fi

  echo "$plugins_sha" > "$hash_file"

  nvim \
    -u /dev/null \
    -c 'silent so ~/.config/nvim/init.vim' \
    -c 'PlugInstall' \
    -c 'UpdateRemotePlugins' \
    -c 'qa'

  # Don't ask on startup.
  mkdir -p ~/.vim/plugged/vim-notes/misc/notes/user/
}

function install_rustfmt {
  if ! installed rustfmt; then
    rustup component add rustfmt-preview
  fi
}

function install_shellcheck {
  if ! installed shellcheck; then
    install shellcheck &> /dev/null
  fi
}

function use_fish {
  # Don't attempt to change shell on Travis CI.
  # The build will hang forever.
  if [[ "$SHELL" == "$(command -v fish)" || -n "$CI" ]]; then
    return
  fi

  fish --command 'set --universal fish_greeting'
  chsh -s "$(command -v fish)"
}

ensure curl
ensure openssl

install_nix
install_packages
install_rust_toolchain
install_cargo_packages
install_fnm
install_node
install_vim_plug
install_neovim_plugins
install_rustfmt
install_shellcheck

use_fish
