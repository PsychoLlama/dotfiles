#!/usr/bin/env bash
# shellcheck disable=SC1091
set -e

ARTIFACTS_DIR="$(dotfiles dir)/artifacts"

if [[ ! -e "$ARTIFACTS_DIR" ]]; then
  mkdir "$ARTIFACTS_DIR"
fi

function announce {
  if [[ -z "$VERBOSE" ]]; then
    return
  fi

  local msg="$*"
  local border=""

  for _ in $(seq ${#msg}); do
    border="$border#"
  done

  echo
  echo "$border"
  echo "$@"
  echo "$border"
  echo
}

# Whether a command exists.
function installed {
  which "$1" &> /dev/null

  return $?
}

function platform_name {
  if [[ "$(uname -s)" == "Darwin" ]]; then
    echo mac
    return
  fi

  if installed apt-get; then
    echo ubuntu
    return
  fi
}

function platform_version {
  local platform="$(platform_name)"

  if [[ "$platform" == mac ]]; then
    uname -r
  else
    source /etc/os-release
    echo "$VERSION_ID"
  fi
}

# Exit 0 if $1 is the smaller of two version numbers.
function version_lt {
  local smallest_version="$(sort -V <(echo -e "$1\n$2") | head -1)"

  [[ "$smallest_version" == "$1" ]]
}

INSTALL_CMD=""

if installed brew; then
  INSTALL_CMD="brew install"
elif installed apt-get; then
  INSTALL_CMD="sudo apt-get install -y"
else
  echo "Unsupported platform. Sorry, loser."
fi

# Best-effort install.
function install {
  $INSTALL_CMD $1 1> /dev/null
}

# Install the thing if it doesn't exist.
function ensure {
  if installed "$1"; then
    return
  fi

  announce Installing "$1"
  install "$1"
}

function ensure_python3 {
  if installed python3; then
    return
  fi

  local pkg="python3"
  install "$pkg" || {
    if ! installed brew; then
      return $?
    fi

    # On Travis CI mac seems to come pre-installed with an
    # old version of python. Force python3.
    brew upgrade "$pkg"
    brew link --overwrite "$pkg"
  }
}

function ensure_apt_add_command {
  if installed add-apt-repository; then
    return
  fi

  install software-properties-common
  install python-software-properties
}

function install_make {
  if installed make; then
    return
  fi

  announce Installing make
  install build-essential
}

function install_zsh {
  if installed zsh; then
    return
  fi

  announce Installing zsh
  install zsh

  # Don't attempt to change shell on Travis CI.
  # The build will hang forever.
  if [[ -n "$CI" ]]; then
    return
  fi

  chsh -s "$(which zsh)"
}

function install_antigen {
  local install_dir="$ARTIFACTS_DIR/antigen"
  if [[ -d "$install_dir" ]]; then
    return
  fi

  announce Installing antigen
  git clone -q --depth=1 https://github.com/zsh-users/antigen.git "$install_dir"
}

function install_yarn {
  if installed yarn; then
    return
  fi

  announce Installing yarn
  local pkg="yarn"

  # Don't install node too.
  if installed brew; then
    pkg="yarn --ignore-dependencies"
  fi

  install "$pkg"
}

function install_ruby {
  local pkg="ruby"
  if installed apt-get; then
    pkg="ruby2.4"
  fi

  if installed "$pkg"; then
    return
  fi

  announce Installing ruby

  install "$pkg"
}

function install_tmux {
  if installed tmux; then
    return
  fi

  announce Installing tmux

  local DEST="$ARTIFACTS_DIR/tmux"
  git clone https://github.com/tmux/tmux.git "$DEST"
  pushd "$DEST" > /dev/null

  git checkout --quiet 2.8
  sh autogen.sh &> /dev/null

  # Assumes the only possible failure is missing packages.
  ./configure > /dev/null || {
    sudo apt-get install -y libevent-dev libncurses5-dev
    ./configure
  }

  make &> /dev/null
  sudo make install &> /dev/null

  rm -rf "$DEST"
  popd > /dev/null
}

function install_tmuxinator {
  if installed tmuxinator; then
    return
  fi

  announce Installing tmuxinator
  sudo gem install tmuxinator > /dev/null
}

function install_ripgrep {
  if installed rg; then
    return
  fi

  announce Installing ripgrep
  cargo install ripgrep
}

function install_fd_find {
  if installed fd; then
    return
  fi

  announce Installing fd
  cargo install fd-find
}

function install_viu {
  if installed viu; then
    return
  fi

  announce Installing viu
  cargo install viu
}

function install_bat {
  if installed bat; then
    return
  fi

  announce Installing bat
  cargo install bat
}

function install_skim {
  if installed sk; then
    return
  fi

  announce Installing skim
  cargo install skim
}

function install_pastel {
  if installed pastel; then
    return
  fi

  announce Installing pastel
  cargo install pastel
}

# A node version manager, alternative to nvm.
function install_fnm {
  if installed fnm; then
    return
  fi

  announce Installing fnm
  curl -sSL https://raw.githubusercontent.com/Schniz/fnm/fa652764747ebeddc30382baf4a49a3ced93e5f5/.ci/install.sh \
    | SKIP_SHELL=true bash &> /dev/null
}

function install_node {
  local node_version=8.11.1

  if installed node && [[ "$(node --version)" == "$node_version" ]]; then
    return
  fi

  announce Installing node
  ~/.fnm/fnm install "$node_version" > /dev/null
  ~/.fnm/fnm use "$node_version" > /dev/null
  ~/.fnm/fnm alias "$node_version" default > /dev/null

  # Make the node path available.
  export PATH=$HOME/.fnm:$PATH
  eval "$(fnm env --multi)"
}

function install_vim_plug {
  local target=~/.local/share/nvim/site/autoload/plug.vim

  if [[ -f "$target" ]]; then
    return
  fi

  announce Installing vim-plug
  curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
}

function install_neovim {
  if installed nvim; then
    return
  fi

  announce Installing neovim
  local pkg="neovim"
  if installed apt-get; then
    sudo apt-get update

    install python-dev
    install python-pip
    install python3-dev
    install python3-pip
  fi

  install "$pkg"
  mkdir -p ~/.vim/backup
  sudo chmod 777 ~/.vim/backup
}

# This is deceptive. The viml interpreter is
# part of my dotfiles framework.
function install_viml {
  sudo ln -sf "$(dotfiles dir)/linked/viml" /usr/local/bin/viml
}

function install_python_neovim_plugin {
  if python3 -c 'import neovim' &> /dev/null; then
    return
  fi

  announce Installing python neovim plugin
  sudo -H pip3 install neovim > /dev/null
}

function install_neovim_plugins {
  local hash_file="$ARTIFACTS_DIR/plugins-hash.txt"
  local plugins_location="$(dotfiles dir)/editor/autoload/editor/plugins.vim"
  local plugins_sha="$(openssl sha256 "$plugins_location" | awk '{print $2}')"
  local last_sha="$(cat "$hash_file" 2> /dev/null || echo "no prior hash")"

  # Only re-install plugins when the plugins.vim file changes.
  if [[ "$last_sha" == "$plugins_sha" ]]; then
    return
  fi

  echo "$plugins_sha" > "$hash_file"
  announce Installing neovim plugins

  # Source the vimrc in non-interactive mode.
  nvim\
    -u /dev/null\
    -c "silent so ~/.config/nvim/init.vim"\
    -c "PlugInstall"\
    -c "UpdateRemotePlugins"\
    -c "qa"

  # Don't ask on startup.
  mkdir -p ~/.vim/plugged/vim-notes/misc/notes/user/
}

function install_vint {
  if installed vint; then
    return
  fi

  # Pre-xenial distros ship with a horribly dated setuptools version.
  local setuptools_version="$(python3 -m easy_install --version | awk '{print $2}')"

  if [[ "${setuptools_version//.*/}" -lt "30" ]]; then
    sudo -H pip3 install -U setuptools
  fi

  announce Installing vint
  sudo -H pip3 install vim-vint > /dev/null
}

function install_pylint {
  if installed pylint; then
    return
  fi

  announce Installing pylint
  if installed brew; then
    pip3 install pylint
  else
    install pylint
  fi
}

function install_rustfmt {
  local list="$(rustup component list)"
  local pkg="$(grep rustfmt-preview <<< "$list")"

  if [[ "$pkg" =~ installed ]]; then
    return
  fi

  announce Installing rustfmt
  rustup component add rustfmt-preview
}

function install_shellcheck {
  if ! installed shellcheck; then
    announce Installing shellcheck
    install shellcheck &> /dev/null
  fi
}

ensure curl
ensure openssl
ensure automake
ensure_python3

# Ubuntu PPAs.
if [[ "$(platform_name)" == ubuntu ]]; then
  ensure_apt_add_command
  UPDATE=

  if ! installed yarn; then
    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
    echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
    UPDATE=1
  fi

  # Ruby PPA (ruby-full doesn't work pre-xenial). No PPA is required
  if ! installed ruby && ! installed ruby2.4; then
    sudo add-apt-repository -y ppa:brightbox/ruby-ng
    UPDATE=1
  fi

  if ! installed nvim; then
    neovim_ppa="ppa:neovim-ppa/stable"

    if version_lt "$(platform_version)" 16; then
      neovim_ppa="ppa:neovim-ppa/unstable"
    fi

    sudo add-apt-repository -y "$neovim_ppa"
    UPDATE=1
  fi

  if [[ -n "$UPDATE" ]]; then
    sudo apt-get update
  fi
fi

install_make
install_zsh
install_antigen
install_yarn
install_ruby
install_tmux
install_tmuxinator
install_ripgrep
install_fd_find
install_viu
install_bat
install_skim
install_pastel
install_fnm
install_node
install_vim_plug
install_neovim
install_python_neovim_plugin
install_neovim_plugins
install_viml
install_vint
install_pylint
install_rustfmt
install_shellcheck
